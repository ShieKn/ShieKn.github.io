<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于使用到的工具</title>
      <link href="/2021/05/13/%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/05/13/%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>需要说明的是，本人不是学计算机的，但是有着独特的热情 虽然我也才开始没多久， 反正开这个博客使用了许多工具，都是按照网上的步骤摸索的 <!--...--></p><hr /><h1 id="建立工具githubhexo"><strong>建立工具：Github，hexo</strong></h1><p>直接上链接吧，这里就懒得写了。需要的可以参考<a href="https://blog.csdn.net/qq_36759224/article/details/82121420">使用 Github Pages 和 Hexo 搭建自己的独立博客</a>，但是需要注意的是：github因为某些奇怪的原因（没错，就是种族歧视）取消了默认分支为master，现在默认成了main</p><hr /><h1 id="博客工具markdown">博客工具：Markdown</h1><p>暂时还没接触多少，或许读研之前就已经接触过md文件，但是不知道是markdown文件，开始学习的时候还是在家里，使用Ubuntu的时候，后来发现记笔记真好用，易读易写。<br />Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br />P.S. Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong></p><p>学习链接，你想要的全都有。<br /><a href="//www.markdown.cn/#acknowledgement">Markdown中文网</a><br /><a href="//daringfireball.net/projects/markdown/syntax">上面那个链接的英文版</a><br />写的真的很好了<br />看完论文有空再学 ，同时在学的还有latex、pytorch ...</p><hr /><p><strong>To Be Continued！</strong></p>]]></content>
      
      
      <categories>
          
          <category> GitHub,Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> Git </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始使用 GitHub</title>
      <link href="/2021/05/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2021/05/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>这个文档是我复制的，我自己也是刚开始使用 GitHub 没几天，写得不好，我就写自己常用的吧</p><p>知乎上这个答案写得好👉<a href="//www.zhihu.com/question/20070065">天猪(刘勇)的答案</a></p><span id="more"></span><hr /><h1 id="什么是-githubgit">什么是 GitHub／Git ？</h1><h2 id="什么是git">什么是Git</h2><p>一个分布式的，文件<strong>版本控制</strong>系统<br />分布式，指没有物理上的「主」储存位置 文件，指的是某一个文件或者是一系列文件组成的文件树<br />版本控制，指的是对修改信息的记录和管理<br />修改，指的是多个编辑者在多个机器，或者多个时间对同一文件进行的修改<br />综上 Git 可以让编辑者方便的管理所有修改</p><h2 id="什么是-github">什么是 GitHub ？</h2><p>是一个 Git 的<strong>托管平台</strong><br />***</p><h1 id="安装git">安装Git</h1><p>在我的这一篇文章👉<a href="//gaoryrt.github.io/2015/09/09/howto/">这个博客建立的流程</a>提到过了</p><blockquote><p>在 <a href="//git-scm.com">Git 官网</a>可以下载到安装包</p></blockquote><p><strong>或者</strong>使用 <a href="//mxcl.github.com/homebrew/">Homebrew</a>，<a href="//www.macports.org/">MacPorts</a> 进行安装</p><p>通过查看版本信息检查是否安装成功： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure></p><p>如果你使用 Mac，Xcode 就自带 Git<br />找找 Xcode -&gt; Preference -&gt; Download 里面的 <code>Command Line Tools</code><br />更新好了就可以在 shell 里使用 git 命令了</p><p>为一个文件夹使用 git 管理，只用定位到文件夹下使用： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></p><p>然后这个文件夹就变成了一个 Git 仓库<br />该文件夹下的所有文件都受这个 Git 仓库管理</p><hr /><h1 id="使用git">使用Git</h1><p><em>这里指的git使用仅限于本地</em><br />添加文件使用<code>add</code>命令，提交则是<code>commit</code>命令<br />比如我要把一个<code>HelloWorld.c</code>提交到git 仓库 先把这个文件放在git的主文件夹中，然后定位到这个文件所在的文件夹使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add HelloWorld.c</span><br><span class="line">$ git commit</span><br></pre></td></tr></table></figure><p>就行了<br />Git的使用和GitHub使用有重复的，请继续往下看GitHub的使用 常用命令看这里👉<a href="//www.zhihu.com/question/31246445">知乎问题 git？</a></p><hr /><h1 id="使用github">使用GitHub</h1><blockquote><p>就是一网站哎呀自己看说明我要玩MC去了<br />坑挖在这里等着填 2015年9月14日 下午9:14</p></blockquote><p>2015年9月20日下午3:30 填坑</p><p>看了一些网页发现github起步实在是太困难了<br />在这里只能给大家，（主要是给自己）指一些方向<br />等看完了才能总结，总结完了才能写<br />不知不觉坑就挖好了</p><hr /><h2 id="在github上注册和登录">在<a href="https://github.com">GitHub</a>上注册和登录</h2><p><em>下面部分来自<a href="https://help.github.com/articles/set-up-git/">官网help文档</a>的翻译</em></p><ol type="1"><li><a href="//git-scm.com/downloads">下载并安装git</a><br /></li><li>打开 <code>Terminal.app</code><br /></li><li>告诉git你的名字，Type everything after the <code>$</code> here:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;YOUR NAME&quot;</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>告诉git你的email地址，这里输入的地址必须和你在注册GitHub时使用的相同， 如果你想隐藏你的email地址，请参考<a href="https://help.github.com/articles/keeping-your-email-address-private">"Keeping your email address private"</a>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;  </span><br></pre></td></tr></table></figure><hr /><h2 id="下一步在git上关联github">下一步：在Git上关联GitHub</h2><p>当你在Git上连接了一个GitHub知识库，你需要使用HTTPS或者SSH与GitHub关联<br />### 使用HTTPS关联(推荐)</p><blockquote><p>克隆HTTPS链接对每一个知识库都有效，你可以得到一个只读或者读写的地址，取决于它公开与否，以及你的允许。</p></blockquote><blockquote><p>链接在哪里都有效，即使你在墙后或者使用了代理，在某些情况下，如果你选择SSH，你只能<a href="https://help.github.com/articles/using-ssh-over-the-https-port">使用SSH的部分</a>。</p></blockquote><blockquote><p>当你通过HTTPS在git上使用<code>git fetch</code>、<code>git pull</code>、<code>git push</code>、<code>git remote</code>命令时，你会被要求输入GitHub的用户名以及密码。</p></blockquote><blockquote><p>如果你使用了<a href="https://help.github.com/articles/about-two-factor-authentication">两个身份的验证</a>，你必须<a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use">创建一个身份地址令牌</a>来使用GitHub，而非你的GitHub密码。 你可以使用<a href="https://help.github.com/articles/caching-your-github-password-in-git">验证助手</a>，这样你就不用每次登陆都输入密码了。</p></blockquote><h3 id="在git上缓存你的github密码">在git上缓存你的GitHub密码</h3><p>你需要确定你的Git是1.7.10版本及以上<br />如果你是通过<a href="//brew.sh/">homebrew</a>安装的git，那么你已经装好了OSXkeychain helper<br />下面是安装方法</p><blockquote><ol type="1"><li>确定你的计算机上是否已经安装了OSXkeychain helper，尝试以下命令： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git credential-osxkeychain  </span><br><span class="line"># 如果已经安装的话返回如下  </span><br><span class="line"># Usage: git credential-osxkeychain &lt;get|store|erase&gt;  </span><br></pre></td></tr></table></figure></li></ol></blockquote><ol start="2" type="1"><li>如果OSXkeychain helper尚未安装，使用以下命令通过curl安装：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git credential-osxkeychain</span><br><span class="line"># 如果没有安装的话返回如下</span><br><span class="line"># git: &#x27;credential-osxkeychain&#x27; is not a git command. See &#x27;git --help&#x27;.  </span><br></pre></td></tr></table></figure><p>继续</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -O \</span><br><span class="line">https://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain</span><br><span class="line"># 这就开始下载了  </span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod u+x git-credential-osxkeychain</span><br><span class="line"># Fix the permissions on the file so it can be run</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>将OSXkeychain helper和git安装到同一个文件夹：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv git-credential-osxkeychain \</span><br><span class="line">&quot;$(dirname $(which git))/git-credential-osxkeychain&quot;</span><br><span class="line"># Move the helper to the path where git is installed</span><br><span class="line"># Password: [enter your password]</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>告诉git使用<code>credential.helper</code>来进行全局配置：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global credential.helper osxkeychain</span><br><span class="line"># Set git to use the osxkeychain credential helper</span><br></pre></td></tr></table></figure><p>下一次你使用HTTPS url进行克隆的时候就会开启OSXkeychain helper缓存了，然后你再使用的时候就不会再要求你输入用户名及密码了。</p><hr /><p><em>以下来自于网站 <a href="//rogerdudler.github.io/git-guide/index.zh.html">git简明指南</a></em></p><h1 id="获得一个知识库repository">获得一个知识库(repository)</h1><p>使用以下命令以获得一个远端服务器上的知识库版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone username@host:/path/to/repository  </span><br></pre></td></tr></table></figure><h1 id="工作流">工作流</h1><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <strong>工作目录</strong>，它持有实际文件；第二个是 <strong>暂存区（Index）</strong>，它像个缓存区域，临时保存你的改动；最后是 <strong>HEAD</strong>，它指向你最后一次提交的结果。</p><h2 id="添加和提交">添加和提交</h2><p>你可以提出更改（把它们添加到<strong>暂存区(index)</strong>），使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br><span class="line">git add *  </span><br></pre></td></tr></table></figure><p>这是 git 基本工作流程的第一步；<br />使用如下命令以实际提交改动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;代码提交信息&quot;  </span><br></pre></td></tr></table></figure><p>现在，你的改动已经提交到了 <strong>HEAD</strong>，但是还没到你的远端仓库。</p><h2 id="推送">推送</h2><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master  </span><br></pre></td></tr></table></figure><p>可以把 master 换成你想要推送的任何分支。</p><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;server&gt;  </span><br></pre></td></tr></table></figure><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p><h1 id="分支">分支</h1><p>分支是用来将特性开发绝缘开来的。<br />在你创建仓库的时候，master 是“默认的”分支。<br />在其他分支上进行开发，完成后再将它们合并到主分支上。<br />创建一个叫做“feature_x”的分支，并切换过去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature_x  </span><br></pre></td></tr></table></figure><p>切换回主分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master  </span><br></pre></td></tr></table></figure><p>再把新建的分支删掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature_x  </span><br></pre></td></tr></table></figure><p>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch&gt;  </span><br></pre></td></tr></table></figure><h1 id="更新与合并">更新与合并</h1><p>要更新你的本地仓库至最新改动，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull  </span><br></pre></td></tr></table></figure><p>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。 要合并其他分支到你的当前分支（例如 master），执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。<br />这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>在合并改动之前，你可以使用如下命令预览差异：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure><h1 id="替换本地改动">替换本地改动</h1><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><hr /><p><strong>To Be Continued！</strong></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> how </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「关于」为何建立该博客</title>
      <link href="/2021/05/12/%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/05/12/%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<hr /><p>在我论文毫无头绪，代码看的头疼的某一个早上，突然想起去年疫情在家折腾了一半的博客，于是乎，在浪费了将近两天时间后，终于搞定了。</p><span id="more"></span><hr /><p>至于为什么浪费了这么久的时间，网络问题至少占了一半，Github的访问真是让人头大，另外一半时间当然是更换主题了，磨刀不误砍柴工么，好看的主题才是博客进行下去的动力。</p><p>如果不出意外的话，接下来将会持续在这个博客上进行更新，其中可能会包括各种学习笔记，各种吐槽，各种突发奇想。</p><p><strong>To Be Continued！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
